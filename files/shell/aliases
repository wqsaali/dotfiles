# vim:set filetype=bash:

# helper function used in other aliases
function _isFunction() {
  check='declare -F --'
  if [[ "$(ps -p "$$" -o comm=)" == *"zsh" ]]; then
    check='print -l ${(ok)functions} | grep -w'
  fi
  eval "$check $1" >/dev/null
}

# Extra aliases
for f in $HOME/.aliases.d/*; do
  if [ -f "$f" ]; then
    source "$f"
  fi
done

# enable color support of ls and also add handy aliases
if [ -x "$(command -v dircolors)" ]; then
  test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
  alias ls='ls --color=auto'
  alias dir='dir --color=auto'
  alias vdir='vdir --color=auto'

  alias grep='grep --color=auto'
  alias fgrep='fgrep --color=auto'
  alias egrep='egrep --color=auto'
  alias watch='watch --color'
fi

# some more ls aliases
if [ -x "$(command -v els)" ]; then
  alias els='els --els-icons=fontawesome'
  # alias ls='els --els-icons=fontawesome'
fi
if [ -x "$(command -v exa)" ]; then
  alias ls='exa --color-scale'
  alias tree='exa -T --color-scale --icons --ignore-glob "*node_modules*|*vendor*"'
fi
alias lc='colorls'
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
if [ -x "$(command -v exa)" ]; then
  alias lt='ls -lhmr --sort=modified && echo "------Oldest------"'
  alias ltr='ls -lhm --sort=modified && echo "------Newest------"'
else
  alias lt='ls -lht && echo "------Oldest--"'
  alias ltr='ls -lhtr && echo "------Newest--"'
fi
# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Location aliases
alias ..='cd ..'
alias ...='cd ../../'
alias ....='cd ../../../'
alias .....='cd ../../../../'
alias back='cd $OLDPWD'

# Grep aliases
alias gr='rg -g "!*vendor/*"'
alias todos="rg -n --nogroup '(TODO|FIX(ME)?):'"

function envgrep() {
  printenv | awk "/${1}/ {print \$1}"
}

function fr() {
  type=""
  if ! [ -z "${3}" ]; then
    type="-t ${3}"
  fi
  perl -p -i -e "s/${1}/${2}/g" $(rg -g '!*vendor/*' ${type} -l "${1}")
}

# Usage: df -h|fawk 2 ; replaces: df -h | awk '{print $2}'
function fawk() {
  local ARGS=( "$@" ); ARGS=( "${ARGS[@]:1}" )
  local first="awk '{print "
  local last="}' $ARGS"
  local fields=""
  local cmd=""
  for i in ${1//,/ }; do
    fields="${fields}\$${i},"
  done
  fields=${fields%%,}
  cmd="${first}${fields}${last}"
  eval $cmd
}

# History
function hgrep() {
  if [ ! -z "$1" ]; then
    echo -e '#ID\t#USER\t#SEQ\t#DATE TIME\t#DURATION\t#COMMAND'
    grep "${1}" $_eternal_history_histfile
  else
    history
  fi
}

function hbtween() {
  # Example:
  #   hbtween 202203301320 202203301530
  #   hbtween '2022-03-30 13:20' '2022-03-30 15:35' mysql
  start="$(echo ${1} | tr -d '\- :')"
  finish="$(echo ${2} | tr -d '\- :')"
  echo -e '#ID\t#USER\t#SEQ\t#DATE TIME\t#DURATION\t#COMMAND'
  awk -v s=${start} -v f=${finish} 'match($4$5, "([0-9]+)-([0-9]+)-([0-9]+)([0-9]+):([0-9]+)", ary) {D=ary[1] ary[2] ary[3] ary[4] ary[5]; if (D > s && D < f) print}' $_eternal_history_histfile | grep "${3}"
}
alias histg='hgrep'


# Colored diffs
if [ -x "$(command -v colordiff)" ]; then
  alias diff='colordiff'
fi

# Diff sorted
# diffs file1 file2 [other diff args, e.g. -y]
function diffs() {
  diff "${@:3}" <(sort "$1") <(sort "$2")
}

function diff-dir() {
  diff -bur ${1} ${2:-./} --exclude '.git' | delta -s
}

# Syntax highlighting in cat and less
# you need Pygments: pip install Pygments
alias colorcat='pygmentize -g'
# or source-highlight: sudo apt install source-highlight
# alias Cat='source-highlight --out-format=esc -o STDOUT -i'
# alias PCat='source-highlight --out-format=esc -o STDOUT'
if [ -x "$(command -v bat)" ]; then
  alias Cat="bat --theme ${BAT_THEME:-TwoDark}"
  alias cat="bat --theme ${BAT_THEME:-TwoDark} --plain"
else
  alias Cat='colorcat'
fi

if [ -x "$(command -v batman)" ]; then
  alias cls='clear'
fi

# Colorful less
function cless() {
  if [ $# -eq 0 ]; then
    cat | pygmentize -g | less -R
  else
    pygmentize -f terminal "$1" | less -R
  fi
}

# Make open and xdg-open work on all plaforms
if ! [ -x "$(command -v open)" ]; then
  alias open='xdg-open'
elif ! [ -x "$(command -v xdg-open)" ]; then
  alias xdg-open='open'
fi
alias cygstart='open'

# Make pbcopy work on all plaforms
# NOTE: for termux you need to install the Termux:API app
if ! [ -x "$(command -v pbcopy)" ]; then
  if [ -x "$(command -v xsel)" ]; then
    alias pbcopy='xsel -i -b'
  elif [ -x "$(command -v xclip)" ]; then
    alias pbcopy='xclip -i -selection clipboard'
  elif [ -x "$(command -v termux-clipboard-set)" ]; then
    alias pbcopy='termux-clipboard-set'
  fi
fi

if ! [ -x "$(command -v pbpaste)" ]; then
  if [ -x "$(command -v xsel)" ]; then
    alias pbpaste='xsel -o -b'
  elif [ -x "$(command -v xclip)" ]; then
    pbpaste='xclip -selection clipboard -o'
  elif [ -x "$(command -v termux-clipboard-get)" ]; then
    alias pbpaste='termux-clipboard-get'
  fi
fi

# Fix window title after ssh
function ssh() {
  if [[ "$TERM" =~ "screen" ]] && [ -n "$TMUX" ]; then
    command ssh "$@"
    tmux set-window-option automatic-rename "on" 1>/dev/null
  else
    command ssh "$@"
  fi
}

# Screen aliases
alias screen-killall='for sess in $(screen -ls); do $ screen -X -S $sess quit'

# Vagrant aliases
alias vagrant-clean='vagrant nuke && vagrant global-status --prune'

alias psg='ps aux | grep -v grep | grep -i -e VSZ -e'
alias sysState="top -l 1 -s 0 | awk ' /Processes/ || /PhysMem/ || /Load Avg/{print}'"

alias lstcp='lsof -nP | grep TCP | grep LISTEN'
alias lsudp='lsof -nP | grep UDP | grep LISTEN'
alias lsservers='lsof -nP | grep LISTEN'

alias fzkill='kill $(ps -ef|fzf --header-lines 1)'

# key management aliases: fingerprint a pubkey and retrieve pubkey from a private key
alias fingerprint='ssh-keygen -lf'
alias pubkey='ssh-keygen -y -f'

# Get all records from a domain
alias dig-all='dig +nocmd +multiline +noall +answer any'

alias headers='curl -ISs'

# get TLS cert info
function certinfo() {
  echo | openssl s_client -showcerts -servername ${1} -connect ${1}:${2:-443} 2>/dev/null | openssl x509 -inform pem -noout -text
}

# get external ip address
function ipinfo() {
  # we could also use curl ifconfig.co
  echo "Egress address: $(curl -s http://ipinfo.io/ip || echo 'Unable to connect!')"
  ip route get default 2>/dev/null || ip route ls
  ping -c 1 google.com >/dev/null 2>&1 && echo -e "Connection: ${COL_GREEN}✔${COL_RESET}" || echo -e "Connection: ${COL_RED}✘${COL_RESET}"
}

# get internet speed
# alias speedtest='wget -O /dev/null http://speedtest.wdc01.softlayer.com/downloads/test500.zip'
alias speedtest='speedtest-cli'

alias netdata='docker run --rm --cap-add SYS_PTRACE -v /proc:/host/proc:ro -v /sys:/host/sys:ro -p 19999:19999 titpetric/netdata'

# Start a local grafana for dashboard development
alias grafana='docker run --rm -p 3000:3000 -e "GF_SECURITY_ADMIN_PASSWORD=secret" grafana/grafana'

alias no-trail="ag --print0 -l '[ \t]+$' | xargs -0 -n1 -r perl -pi -e 's/[ \t]+$//'"

# Deduplicate path variables
function get_var() {
  eval 'printf "%s\n" "${'"$1"'}"'
}

function set_var() {
  eval "$1=\"\$2\""
}

function dedup_pathvar() {
  pathvar_name="$1"
  pathvar_value="$(get_var "$pathvar_name")"
  deduped_path="$(perl -e 'print join(":",grep { not $seen{$_}++ } split(/:/, $ARGV[0]))' "$pathvar_value")"
  set_var "$pathvar_name" "$deduped_path"
}

function trim() {
    local trimmed="$1"

    # Strip leading space.
    trimmed="${trimmed## }"
    # Strip trailing space.
    trimmed="${trimmed%% }"

    echo "$trimmed"
}

alias autoshfmt='shfmt -i 2 -s -w .'
alias autoshellcheck='shellcheck $(shfmt -f .) -f diff | git apply'

# https://github.com/idank/explainshell/issues/4#issuecomment-354709120
function explain-shell() {
  response=$(w3m -dump 'http://explainshell.com/explain?cmd='$(echo $@ | tr ' ' '+'))
  cat -s <(grep -v -e explainshell -e • -e □ -e 'source manpages' <<< "$response")
}

# Bash calculator.
function calc() {
  bc -l <<< "${1}";
}

# Bash weather app
function wttr() {
  curl "wttr.in/${1}"
}
alias wttr_moon='curl wttr.in/Moon'

# Simplified archive extraction
function extract() {
  if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
  else
    if [ -f "$1" ] ; then
      local nameInLowerCase=$(echo "${1}" | awk '{print tolower($0)}')
      case "$nameInLowerCase" in
        *.tar.bz2)   tar xvjf ./"$1"    ;;
        *.tar.gz)    tar xvzf ./"$1"    ;;
        *.tar.xz)    tar xvJf ./"$1"    ;;
        *.lzma)      unlzma ./"$1"      ;;
        *.bz2)       bunzip2 ./"$1"     ;;
        *.rar)       unrar x -ad ./"$1" ;;
        *.gz)        gunzip ./"$1"      ;;
        *.tar)       tar xvf ./"$1"     ;;
        *.tbz2)      tar xvjf ./"$1"    ;;
        *.tgz)       tar xvzf ./"$1"    ;;
        *.zip)       unzip ./"$1"       ;;
        *.Z)         uncompress ./"$1"  ;;
        *.7z)        7z x ./"$1"        ;;
        *.xz)        unxz ./"$1"        ;;
        *.exe)       cabextract ./"$1"  ;;
        *)           echo "extract: '$1' - unknown archive method" ;;
      esac
    else
      echo "'$1' - file does not exist"
    fi
  fi
}

alias rainbow='for COLOR in {1..255}; do echo -en "\e[38;5;${COLOR}m${COLOR} "; done; echo;'
