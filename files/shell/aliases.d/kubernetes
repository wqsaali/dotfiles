# vim:set filetype=bash:
# Kubectl aliases

[ -f ${HOME}/.ktx ] && source ${HOME}/.ktx/ktx
[ -f $HOME/.kbenv/kbenv.sh ] && source $HOME/.kbenv/kbenv.sh
[ -f $HOME/.helmenv/helmenv.sh ] && source $HOME/.helmenv/helmenv.sh
[ -f ${HOME}/.kube-fzf/kube-fzf.sh ] && source ${HOME}/.kube-fzf/kube-fzf.sh
[ -f ${HOME}/.fubectl/fubectl.source ] && source ${HOME}/.fubectl/fubectl.source

[ -f ~/.kubectl_aliases/.kubectl_aliases ] && source ~/.kubectl_aliases/.kubectl_aliases
# to use GNU watch command instead of kubectl [...] --watch
# [ -f ~/.kubectl_aliases/.kubectl_aliases ] && source <(cat ~/.kubectl_aliases/.kubectl_aliases | sed -r 's/(kubectl.*) --watch/watch \1/g')
# to print the full command before running it
# function kubectl() { echo "+ kubectl $@">&2; command kubectl $@; }

function kctl() {
  CMD="${1}"
  if [ ${#} -gt 0 ]; then
    shift
  fi
  if _isFunction "kubectl-${CMD}"; then
    "kubectl-${CMD}" "${@}"
    return $?
  fi
  COLOR=""
  if [ -x "$(command -v grc)" ]  && [[ "$CMD" != "modify-secret" ]]&& [[ "$CMD" != "edit" ]] && [[ "$CMD" != "exec" ]] && [[ "$CMD" != "ssh" ]] && [[ "$CMD" != "access-matrix" ]] && [[ "$CMD" != *"shell"* ]]; then
    COLOR="grc -es --colour=auto"
  fi
  local args=(${COLOR} kubectl ${CMD})
  for arg in ${@}; do
    args+=( "$(printf '%q' "$arg")" )
  done
  eval "${args[*]}"
}
# alias k='kubectl "--context=${KUBECTL_CONTEXT:-$(kubectl config current-context)}" ${KUBECTL_NAMESPACE/[[:alnum:]-]*/--namespace=${KUBECTL_NAMESPACE}}'
# alias kubectl="kubectl --context \${KUBE_CONTEXT:-\$(command kubectl config current-context)}"
alias k='kctl'
alias kga='kctl get -A'
alias kd='kctl describe'
alias kvs='kctl view-secret'
alias keds='command kubectl modify-secret'
alias ked='command kubectl edit'
alias krr='kctl rollout restart'

function kgy() {
  kubectl get ${@} -o yaml | bat --paging never --theme ${BAT_THEME:-TwoDark} -p -l yaml
}

function kgj() {
  kubectl get ${@} -o json | bat --paging never --theme ${BAT_THEME:-TwoDark} -p -l json
}

function kubectl-printenv() {
  kubectl exec ${@} -- strings /proc/1/environ
}
alias kprintenv='kubectl-printenv'
alias kpe='kubectl-printenv'

function kubectl-diff() {
  kubectl diff ${@} | delta -s
}
alias kdiff='kubectl-diff'

function kubectl-getNotReady(){
  filter='.items[]| select(.status != null)|select(.status.conditions[] != null)|select([.status.conditions[]|select(.type == "Ready" and .status == "False")]|length == 1)| .metadata.name'
  kubectl get ${@} -o json | jq -r "${filter}"
}
alias kgnr='kctl getNotReady'

function kubectl-leader() {
  kubectl -n kube-system get ep kube-scheduler -o json | jq -r '.metadata.annotations."control-plane.alpha.kubernetes.io/leader"' | jq -r '.holderIdentity' | cut -d_ -f1
}

function kubectl-events() {
  FILTER=""
  if [ -n "$1" ]; then
    FILTER="--field-selector involvedObject.name=${@}"
  fi
  kubectl get event ${FILTER}
}
alias kctl-events='kubectl-events'

function kubectl-ctx() {
  if [[ "${1}" == "kind" ]]; then
    export KUBECONFIG=~/.kube/kind-config
    return
  fi
  CFG_DIR=~/.kube/config.d
  if [ -d "${CFG_DIR}" ] && [[ "$KUBECONFIG" != "~/.kube/config" ]]; then
    if [ -n "$1" ]; then
      if [ -f "${CFG_DIR}/${1}" ]; then
        export KUBECONFIG="${CFG_DIR}/${1}"
        return
      fi
    else
      CTX=$(ls -1 ${CFG_DIR}/ | fzf)
      export KUBECONFIG="${CFG_DIR}/${CTX}"
      return
    fi
  fi
  kubectx "${@}"
}
alias kctx='kubectl-ctx'

function kubectl-cfg() {
  CFG=${KUBECONFIG:-~/.kube/config}
  CFG_DIR=~/.kube/config.d
  case "$1" in
    split)
      mkdir -p "${CFG_DIR}"
      for ctx in $(kubectl --kubeconfig="${CFG}" config get-contexts -o name); do
        kubectl --kubeconfig="${CFG}" config view --minify --context=${ctx} > "${CFG_DIR}/${ctx}"
      done
      if [[ "$2" == "-p" ]] || [[ "$2" == "--purge" ]]; then
        rm "${CFG}"
      fi
      ;;
    merge)
      DST=${3:-~/.kube/config}
      if [ -z "$2" ]; then
        echo 'Usage:'
        echo 'kcfg merge <source_cfg> [<dest_cfg>]'
        return 1
      fi
      if [[ "$2" == "all" ]]; then
        for CTX in $(ls -1 ${CFG_DIR}); do
          KUBECONFIG="${DST}:${CFG_DIR}/${CTX}" kubectl config view --flatten >> ${DST}
        done
      else
        KUBECONFIG="${DST}:${2}" kubectl config view --flatten >> ${DST}
      fi
      ;;
    *)
      echo -e "Unknown command!\n  Available commands are:"
      echo -e " split\tSplit ${CFG} into separate files under ${CFG_DIR}/ (-p to delete ${CFG} in the end)"
      echo -e " merge\tMerge two kubectl config files (kcfg merge <source_cfg> [<dest_cfg>])"
      ;;
  esac
}
alias kcfg='kubectl-cfg'

function kubectl-enter() {
  kubectl exec -ti ${@} -- sh
}
alias kctl-enter='kubectl-enter'

function kexec(){ pod=$1; shift; command kubectl exec -it $pod -- $@; }
alias kctl-exec='kexec'

function krun() { name=$1; shift; image=$1; shift; command kubectl run -it --generator=run-pod/v1 --image $image $name -- $@; }
alias kctl-run='krun'

function kubectl-remote_shell() {
  command kubectl ${@} run --restart=Never --rm -i --tty debug --image=quay.io/giantswarm/debug -- sh
}
alias kctl-shell='kubectl-remote_shell'
alias kube-shell='kubectl-remote_shell'
alias kshell='kubectl-remote_shell'

alias kssh='kubectl-ssh'
alias kpssh='kubectl-pssh'

function kubectl-purge_crd() {
  if [ -z "${1}" ]; then
    echo 'please provide a CRD name'
    return
  fi
  kubectl get ${1} --all-namespaces --no-headers | awk '{print $2 " -n " $1}' | xargs -L1 -r kubectl patch -p '{"metadata":{"finalizers": []}}' --type=merge ${1};
  kubectl get ${1} --all-namespaces --no-headers | awk '{print $2 " -n " $1}' | xargs -L1 -r kubectl delete ${1};
  kubectl api-resources -o name | grep "${1}" | awk '{print $1}' | xargs -r kubectl delete crd
}
alias kctl-clean_crd='kubectl-purge_crd'

alias kctl-list_images='kubectl get pods --all-namespaces -o jsonpath="{..image}" | tr -s "[[:space:]]" "\n" | sort | uniq -c'
alias kctl-drain='kubectl drain --delete-local-data --ignore-daemonsets'
alias kctl-httpie='kubectl run --restart=Never --rm -i --tty httpie-tmp --image=alpine/httpie'

alias kube='kubectl'
alias kns='kubens'
alias kc='kubectl'
alias krew='kubectl krew'
alias kindenv='export KUBECONFIG=~/.kube/kind-config'

# Helm aliases
alias hup='helm upgrade --install --atomic --cleanup-on-fail'
alias hls='helm list -a'
alias hga='helm get all'
alias hgv='helm get values'
alias hgh='helm get hooks'
alias hsa='helm show all'
alias hdel='helm delete'
alias hhist='helm history'

alias helm-plugin-update='helm plugin list | awk '\''!/NAME/ {print $1}'\'' | xargs -L 1 -r helm plugin update'

function helm-clean() {
  NS=${1:-kube-system}
  if [[ "${NS}" == "all" ]]; then
    NS=$(kubectl get ns --no-headers -o custom-columns='NAME:.metadata.name')
  fi
  for N in ${NS}; do
    echo "Looking for ConfigMaps in ${N}:"
    kubectl delete cm -n ${N} -l 'OWNER=TILLER' -l 'STATUS in (FAILED,SUPERSEDED,DELETED)'
    echo "Looking for Secrets in ${N}:"
    kubectl delete secrets -n ${N} -l 'OWNER=TILLER' -l 'STATUS in (FAILED,SUPERSEDED,DELETED)'
  done
}

function helm-getSecrets() {
  HELM_HOME="${HELM_HOME:-~/.helm}"
  kubectl get secret -n kube-system tiller-secret -o go-template='{{index .data "ca.crt"| base64decode}}' > $HELM_HOME/ca.pem
  kubectl get secret -n kube-system tiller-secret -o go-template='{{index .data "tls.crt"| base64decode}}' > $HELM_HOME/cert.pem
  kubectl get secret -n kube-system tiller-secret -o go-template='{{index .data "tls.key"| base64decode}}' > $HELM_HOME/key.pem
}

function helmsman-adopt() {
  kubectl label secret -n ${2} -l name=${1} --overwrite HELMSMAN_CONTEXT=${3:-default} MANAGED-BY=HELMSMAN NAMESPACE=${2}
}

# Minikube
function mk() {
  export KUBECONFIG=~/.kube/config.d/minikube
  case "$1" in
    start)
      shift
      minikube start --driver=hyperkit --container-runtime=docker "${@}"
      eval $(minikube docker-env)
      ;;
    purge)
      minikube delete --all --purge
      ;;
    *)
      minikube "${@}"
  esac
}

# microk8s aliases for macOS
if [[ "$OSTYPE" == "darwin"* ]]; then
  alias microk8s.install='multipass exec microk8s-vm -- sudo snap install microk8s --classic && multipass exec microk8s-vm -- sudo iptables -P FORWARD ACCEPT'
  alias microk8s.setup='multipass exec microk8s-vm -- /snap/bin/microk8s.enable dns storage ingress metrics-server dashboard registry'
  alias microk8s.new='multipass launch --name microk8s-vm --mem 4G --disk 40G && microk8s.install && microk8s.setup'
  alias microk8s.start='multipass start microk8s-vm'
  alias microk8s.stop='multipass stop microk8s-vm'
  alias microk8s.delete='multipass delete microk8s-vm && multipass purge'
  alias microk8s.ip='multipass list | grep microk8s-vm | awk '\''{print $3}'\'''
  alias microk8s.shell='multipass shell microk8s-vm'
  alias microk8s.status='multipass exec microk8s-vm -- /snap/bin/microk8s.status'
  alias microk8s.enable='multipass exec microk8s-vm -- /snap/bin/microk8s.enable'
  alias microk8s.config='multipass exec microk8s-vm -- /snap/bin/microk8s.config'
  alias microk8s.docker='multipass exec microk8s-vm -- /snap/bin/microk8s.docker'
  alias microk8s.kubectl='multipass exec microk8s-vm -- /snap/bin/microk8s.kubectl'
fi

# Velero aliases
alias velero='kubectl exec -it -n velero ${VELRO:-$(kubectl get pods -n velero | grep velero | awk '\''{ print $1}'\'')} -- /velero'

# Gardener aliases
alias gctl='gardenctl'
alias gk='gardenctl kubectl --'

# Target a shoot in a graden
# shoot <garden> <shoot>
function shoot() {
  if [[ "${1}" == "ls" ]]; then
    for g in $(garden ls | grep name | cut -d' ' -f3); do
      echo -n "${g} "
      shoot ${g} ls
      echo ''
    done
    return
  fi
  gardenctl target garden ${1} > /dev/null
  case ${2} in
    "ls") gardenctl ls shoots;;
    *)
      export $(gardenctl target shoot ${2})
      echo "KUBECONFIG=${KUBECONFIG}"
      ;;
  esac
}

function seed() {
  if [[ "${1}" == "ls" ]]; then
    for g in $(garden ls | grep name | cut -d' ' -f3); do
      echo -n "${g} "
      seed ${g} ls
      echo ''
    done
    return
  fi
  gardenctl target garden ${1} > /dev/null
  case ${2} in
    "ls") gardenctl ls seeds;;
    *)
      export $(gardenctl target seed ${2})
      echo "KUBECONFIG=${KUBECONFIG}"
      ;;
  esac
}

function garden() {
  case ${1} in
    "ls") gardenctl ls gardens;;
    *)
      export $(gardenctl target garden ${1})
      echo "KUBECONFIG=${KUBECONFIG}"
      ;;
  esac
}

