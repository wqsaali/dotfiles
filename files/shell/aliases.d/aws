# vim:set filetype=bash:

# AWS aliases

# if [[ -x "$(command -v awsv2)" && ! -x "$(command -v aws)" ]]; then
#   alias aws='awsv2'
# fi

function aws-assume-role() {
  role="${1-}"
  assumed_role=""
  if [ -z "${role}" ]; then
    assumed_role="$(aws sts get-caller-identity --output text --query 'Arn')"
    role=${"${assumed_role%/*}/assumed-/"}
  fi
  if [ -z "${role}" ]; then
    echo "failed to get role ARN"
    return
  fi
  sessionName="${2-}"
  if [ -z "${sessionName}" ]; then
    if [ -n "${assumed_role}" ]; then
      sessionName="${assumed_role##*/}"
    else
      sessionName="$(date +%s)"
    fi
  fi
  result=$(find ~/.aws/cli/cache -type f -name "*.json" -exec grep "\"Arn\": \"${role}\"" {} \;)
  if [ -z "${result}" ]; then
    result=$(aws sts assume-role --role-arn ${role} --role-session-name ${sessionName})
    if [ -z "${result}" ]; then
      echo "failed to assume role"
      return
    fi
  fi
  # eval $(echo ${result} | jq -r '"export AWS_ACCESS_KEY_ID=\""+.Credentials.AccessKeyId+"\"; export AWS_SECRET_ACCESS_KEY=\""+.Credentials.SecretAccessKey+"\"; export AWS_SESSION_TOKEN=\""+.Credentials.SessionToken+"\";"')
  export AWS_ACCESS_KEY_ID=$(echo "${result}" | jq -r '.Credentials.AccessKeyId')
  export AWS_SECRET_ACCESS_KEY=$(echo "${result}" | jq -r '.Credentials.SecretAccessKey')
  export AWS_SESSION_TOKEN=$(echo "${result}" | jq -r '.Credentials.SessionToken')
}

function aws_env() {
  if [ -n "${1}" ]; then
    profile="--profile ${1}"
  fi
  export AWS_ACCESS_KEY_ID=$(eval "aws configure get aws_access_key_id ${profile}")
  export AWS_SECRET_ACCESS_KEY=$(eval "aws configure get aws_secret_access_key ${profile}")
  export AWS_SESSION_TOKEN=$(eval "aws configure get aws_session_token ${profile}")
  export AWS_SECURITY_TOKEN=$(eval "aws configure get aws_security_token ${profile}")
  export AWS_DEFAULT_REGION=$(eval "aws configure get region ${profile}")

  # if [ -z "${AWS_ACCESS_KEY_ID}" ]; then
  #   # support mfa enabled accounts
  #   arn=$(aws sts get-caller-identity --output text --query 'Arn')
  #   if [ -z "${arn}" ]; then
  #     echo "failed to get identity ARN"
  #     return
  #   fi
  #   cache=$(grep -lir "${arn}"  ~/.aws/cli/cache )
  #   if [ -z "${cache}" ]; then
  #     echo "failed to get cached credentials"
  #     return
  #   fi
  #   export AWS_ACCESS_KEY_ID=$(jq -r '.Credentials.AccessKeyId' "${cache}")
  #   export AWS_SECRET_ACCESS_KEY=$(jq -r '.Credentials.SecretAccessKey' "${cache}")
  #   export AWS_SECURITY_TOKEN=$(jq -r '.Credentials.SessionToken' "${cache}")
  # fi

  echo "$1 environment variables exported"
}

function ecr-login() {
  region=${AWS_DEFAULT_REGION}
  if [ -z "${region}" ]; then
    region=$(aws ec2 describe-availability-zones --output=text --query='AvailabilityZones[0].[RegionName]')
  fi
  account=$(aws sts get-caller-identity --output=text --query='Account')
  repo="${account}.dkr.ecr.${region}.amazonaws.com"
  case "$1" in
    "helm")
      aws ecr get-login-password | helm registry login --username AWS --password-stdin "${repo}"
      ;;
    *)
      aws ecr get-login-password | docker login --username AWS --password-stdin "${repo}"
      ;;
  esac
}

# switch AWS profiles
function actx() {
  CTX="${1-}"
  if [ -z "${CTX}" ]; then
    CTX="$(aws configure list-profiles|fzf)"
  fi
  if [ -z "${CTX}" ]; then
    return
  fi
  export AWS_PROFILE="${CTX}"
  aws sts get-caller-identity
  if [[ "${CTX}" == "tf" ]]; then
    CTX="mfa_temp"
  fi
  aws_env ${CTX}
}

# switch AWS regions
function actr() {
  CTX="${1-}"
  if [ -z "${CTX}" ]; then
    CTX="$(aws --output json ec2 describe-regions | jq -r '.Regions[]|.RegionName'|fzf)"
  fi
  if [ -z "${CTX}" ]; then
    return
  fi
  export AWS_DEFAULT_REGION="${CTX}"
}

# switch EKS contexts
function ekctx() {
  CFG_DIR=~/.kube/config.d
  CTX="${1-}"
  if [ -z "${CTX}" ]; then
    CTX="$(aws --output json eks list-clusters | jq -r '.clusters[]' | fzf)"
  fi
  if [ -z "${CTX}" ]; then
    return
  fi
  role=""
  # role=$(aws sts get-caller-identity --output text --query 'Arn')
  # if [ -n "${role}" ]; then
  #   role="--role-arn ${role}"
  # fi
  export KUBECONFIG="${CFG_DIR}/${CTX}"
  aws eks update-kubeconfig --name "${CTX}" ${role}
}
