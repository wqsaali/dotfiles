# vim:set filetype=bash:

function git-main_branch() {
  if [ ! -f ".git/refs/remotes/origin/HEAD" ]; then
    git remote set-head origin --auto &> /dev/null
  fi
  git branch -rl "*/HEAD" | rev | cut -d/ -f1 | rev
}

function git-status() {
  UNCOMMITED=$(git status -s)
  LOCAL=$(git rev-parse @)
  REMOTE=$(git rev-parse @{u})
  BASE=$(git merge-base @ @{u})

  if [ "$UNCOMMITED" != "" ]; then
    echo "Need to commit"
  elif [ $LOCAL = $REMOTE ]; then
    echo "Up-to-date"
  elif [ $LOCAL = $BASE ]; then
    echo "Need to pull"
  elif [ $REMOTE = $BASE ]; then
    echo "Need to push"
  else
    echo "Diverged"
  fi
}

function gch() {
 git checkout "$(git branch â€” all | fzf| tr -d '[:space:]')"
}

function git-compare() {
  git rev-list --left-right --count $1...$2
}

function git-branch-status() {
  git for-each-ref --format="%(refname:short) %(upstream:short)" refs/heads | \
  while read local remote
  do
    [ -z "$remote" ] && continue
    git rev-list --left-right ${local}...${remote} -- 2>/dev/null >/tmp/git_upstream_status_delta || continue
    LEFT_AHEAD=$(grep -c '^<' /tmp/git_upstream_status_delta)
    RIGHT_AHEAD=$(grep -c '^>' /tmp/git_upstream_status_delta)
    echo "$local (ahead $LEFT_AHEAD) | (behind $RIGHT_AHEAD) $remote"
  done
}

# Merges current branch with the specified branch
function git-merge() {
  CUR_BRANCH=$(basename $(git symbolic-ref -q HEAD))
  SRC_BRANCH=${1:-"master"}
  git pull && git checkout ${SRC_BRANCH} && git pull && git checkout ${CUR_BRANCH} && git pull && git merge ${SRC_BRANCH}
}

# Git aliases
alias git-pull-recursive='git recursive pull'
alias git-pull-all='git recursive pull'
alias git-clean-all='git recursive clean'
alias git-logbranches='git for-each-ref --sort=-committerdate refs/heads/ --format="%(color:red)%(refname:short)%(color:reset)   %(subject)"'
alias git-unpushed-commits='git for-each-ref --format="%(push:track)" refs/heads'
alias git-prune-branches='git remote prune origin'
alias git-prune-merged='git branch -r --merged | grep -v master | sed '\''s/origin\///'\'' | xargs -n 1 -r git push --delete origin'
alias git-purge-branches='git fetch --all -p; git branch -vv | grep "\[.*: gone\]" | awk '\''{ print $1 }'\'' | xargs -n 1 -r git branch -d'
alias git-current-tag='git name-rev --tags --name-only $(git rev-parse HEAD)'
alias git-reset='git fetch origin; git reset --hard $(git remote | head -1)/$(git name-rev --name-only HEAD); git clean -fdx'
alias git-tags='git for-each-ref --format "%(refname) %09 %(taggerdate) %(subject) %(taggeremail)" refs/tags  --sort=taggerdate'
# change the current directory to the parent directory that contains the .git folder
alias git-root='cd "`git rev-parse --show-toplevel`"'

alias gcl='git goclone -u'
alias gdf='git diff'
alias gpl='git pull'
alias gph='git push'
alias gcm='git checkout $(git-main_branch)'
alias gco='git checkout'
alias gcom='git checkout $(git-main_branch)'
alias gdm='git diff $(git-main_branch)'
alias grbm='git rebase $(git-main_branch)'
alias grbr='git rebase --root'
alias gaf='git amend . && git force'
alias gtn='git tag $(svu next)'

alias masterDiff='git diff $(git merge-base --fork-point master)'
alias latestTag='git describe --tags `git rev-list --tags --max-count=1`'
alias latestTagDiff='git show --name-only `git describe --tags` `git rev-list --tags --max-count=1`..'

alias standup='cd code/; git standup -s -L -m4 -d3; back'

# if [ -x "$(command -v lab)" ]; then
#   alias git=lab
# elif [ -x "$(command -v hub)" ]; then
#   alias git=hub
# fi

alias prs='gh dash'
