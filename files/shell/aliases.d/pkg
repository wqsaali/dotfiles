# vim:set filetype=bash:

# Gem aliases
# alias gem-upgrade='gem update $(gem list | cut -d\  -f 1)'
alias gem-upgrade='gem update && gem cleanup'

# npm aliases
alias npm-upgrade='npm upgrade -g'

if [[ "$OSTYPE" == *"android"* ]]; then
  alias npm='proot --link2symlink npm'
fi

# Go aliases
function goclean() {
  go clean -modcache
  rm -rf ~/.glide/
  rm -rf ~/go/.cache/
  rm -rf ~/.cache/go-build/
  for gp in ${GOPATH//:/ }; do
    rm -rf $gp/pkg
  done
  # rm -rf ~/go/src/*
}
alias go-clean='goclean'

# Python aliases
# alias python='python3'
# alias pip='pip3'

# PIP aliases
alias pip-upgrade='(echo pip; pip freeze | awk '\''BEGIN{FS="=="}{print $1}'\'') | xargs -r pip install -U'
alias pip-upgrade1='(echo pip; pip freeze | awk '\''BEGIN{FS="=="}{print $1}'\'') | xargs -r -L1 pip install -U'
alias pip3-upgrade='(echo pip; pip3 freeze | awk '\''BEGIN{FS="=="}{print $1}'\'') | xargs -r pip3 install -U'
alias pip2-upgrade='(echo pip; pip2 freeze | awk '\''BEGIN{FS="=="}{print $1}'\'') | xargs -r pip2 install -U'
alias pip-clean='rm -rf ~/.cache/pip/'

# apt & brew aliases
if [[ "$OSTYPE" == "linux-gnu" ]]; then
  if ! [ -x "$(command -v brew)" ]; then
    alias brew='apt'
  fi

# if user is not root, pass all commands via sudo #
  if [ $(id -u) -ne 0 ]; then
    alias apt='sudo apt'
    alias apt-get='sudo apt-get'
    alias aptitude='sudo aptitude'
    alias gem='sudo -H gem'
    alias pip='sudo -H pip'
  fi

  function apt-cleanup() {
    ls /boot/ | grep vmlinuz | sed 's@vmlinuz-@linux-image-@g' | sed 's@\.efi\.signed@@g' | grep -v $(uname -r) | sort -Vru | tail -n +2 | xargs -r sudo aptitude purge -y
    sudo apt autoremove
    sudo aptitude autoclean
    sudo apt-get clean
    dpkg --list | grep "^rc" | cut -d " " -f 3 | xargs -r sudo dpkg --purge
  }

  alias apt-upgrade='sudo apt update; sudo apt full-upgrade; apt-cleanup'
  alias dist-upgrade=apt-upgrade

elif [[ "$OSTYPE" == "darwin"* ]]; then
  alias apt='brew'
  alias cask='brew cask'
  alias tap='brew tap'
  alias service='brew services'

  brew-cask-upgrade() {
    if [ "$1" != '--continue' ]; then
      echo "Removing brew cache"
      rm -rf "$(brew --cache)"
      echo "Running brew update"
      brew update
    fi
    for c in $(brew list --cask); do
      installed=$(ls $(brew --prefix)/Caskroom/${c})
      installed_version=$(echo $installed | sort --version-sort| tail -n 1)
      info_version=$(brew info --cask "${c}" | grep "${c}: " | grep -Eo '(\s|^)v?(([0-9]+).?)+((-|\+|\.)[a-zA-Z0-9.+_-]+)?(\s|$)' | tr -d '[[:blank:]]')
      if [ -z ${info_version} ]; then
        info_version="$(brew info --cask 1password | grep "${c}: " | awk '{print $3}')"
      fi
      if [[ "$installed_version" != "$info_version" ]]; then
        echo -e "\n\nInstalled versions of ${c}:"
        echo "$installed"
        echo -e "Latest version of $c: $info_version"
        if [ "$1" != '-y' ]; then
          select ynx in "Yes" "No" "Exit"; do
            case $ynx in
              "Yes") echo "Re-installing $c"; brew reinstall --cask "$c"; break;;
              "No") echo "Skipping $c"; break;;
              "Exit") echo "Exiting brew-cask-upgrade"; return;;
            esac
          done
        else
          echo -e "${COL_YELLOW}>>>${COL_RESET} Re-installing $c"; brew reinstall --cask "$c"
        fi
      else
          echo -e "${COL_BLUE}>>>${COL_RESET} $c is up to date"
      fi
    done
    brew cleanup
  }

  check-keg_only() {
    kegs=$(brew info --installed --json | jq -r 'map(select(.keg_only == true and .linked_keg == null)) | "/usr/local/opt/" + .[].name + "/bin"')
    for keg in $kegs; do
      if ! [[ ":$PATH:" == *":${keg}:"* ]] && [ -d "$keg" ]; then
        echo -e "\n# WARNING: ${keg} is not in your PATH"
        echo '# add the following to your profile to fix it'
        cat << EOF
if [ -d '${keg}' ]; then
  PATH="${keg}:\$PATH"
fi
EOF
      fi
    done
  }

  alias cask-upgrade='brew-cask-upgrade'
  alias brew-cleanup='brew cleanup'
  alias brew-upgrade='brew update && brew upgrade && brew cleanup && check-keg_only'
  alias dist-upgrade='brew-upgrade && brew-cask-upgrade -y'

elif [[ "$OSTYPE" == *"android"* ]]; then
  alias apt-upgrade='apt update; apt full-upgrade'
  alias dist-upgrade=apt-upgrade
fi

function asdf-update() {
  asdf plugin update --all
  for plugin in $(asdf plugin list); do
    asdf install ${plugin} latest
    asdf global ${plugin} latest
  done
  rm -rf ${HOME}/.asdf/shims; asdf reshim
}

function update-all-things() {
  if [ -x "$(command -v asdf)" ]; then
    asdf-update
  fi

  dist-upgrade

  # rustup self update
  if [ -x "$(command -v rustup)" ]; then
    rustup update
  fi
  if [ -x "$(command -v cargo)" ]; then
    cargo install-update -a
  fi
  npm-upgrade
  gem-upgrade
  pip-upgrade1

  if [ -x "$(command -v mas)" ]; then
    mas upgrade
  fi
  if [ -x "$(command -v softwareupdate)" ]; then
    softwareupdate --install -a
  fi

  # Update oh my zsh
  if [[ "$(ps -p "$$" -o comm=)" == *"zsh" ]]; then
    omz update
  fi

  # vim-update
  vi +PlugUpdate +PlugUpgrade +CocUpdate +qall

  # if [ -x "$(command -v go)" ]; then
  #   go get -u all
  # fi
  if [ -x "$(command -v apm)" ]; then
    apm upgrade --no-confirm
  fi
  if [ -x "$(command -v kubectl-krew)" ]; then
    kubectl krew update
    kubectl krew upgrade
  fi
  if [ -x "$(command -v helmenv)" ]; then
    latest=$(helmenv list remote | sort --version-sort | tail -1)
    helmenv install "${latest}"
    helmenv use "${latest}"
  fi
  if [ -x "$(command -v vagrant)" ]; then
    vagrant plugin update
  fi
}

