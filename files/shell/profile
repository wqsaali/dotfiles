# ~/.profile: executed by the command interpreter for login shells.
# This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login
# exists.
# see /usr/share/doc/bash/examples/startup-files for examples.
# the files are located in the bash-doc package.

# the default umask is set in /etc/profile; for setting the umask
# for ssh logins, install and configure the libpam-umask package.
#umask 022

if [[ "$CONFIGURED" == "true" ]]; then
  return
fi

[ -f "${HOME}/.variables" ] && source "${HOME}/.variables"
[ -f "${HOME}/.variables.local" ] && source "${HOME}/.variables.local"

# CDPATH
CDPATH=".:${HOME}:${HOME}/workingCopies:${HOME}/workingCopies/src:$(ls -1d ${HOME}/workingCopies/src/*/ | tr '\n' ':')"

# Brew paths
if [ -x "$(command -v brew)" ]; then
  BREW_PREFIX=$(brew --prefix)

  if [ -d "${BREW_PREFIX}/sbin" ] ; then
    PATH="${BREW_PREFIX}/sbin:$PATH"
  fi
  if [ -d "${BREW_PREFIX}/opt/curl/bin" ]; then
    PATH="${BREW_PREFIX}/opt/curl/bin:$PATH"
  fi
  if [ -d "${BREW_PREFIX}/opt/icu4c/bin" ]; then
    PATH="${BREW_PREFIX}/opt/icu4c/bin:$PATH"
  fi
  if [ -d "${BREW_PREFIX}/opt/libarchive/bin" ]; then
    PATH="${BREW_PREFIX}/opt/libarchive/bin:$PATH"
  fi
  if [ -d "${BREW_PREFIX}/opt/ncurses/bin" ]; then
    PATH="${BREW_PREFIX}/opt/ncurses/bin:$PATH"
  fi
  if [ -d "${BREW_PREFIX}/opt/openssl/bin" ]; then
    PATH="${BREW_PREFIX}/opt/openssl/bin:$PATH"
  fi

  if [ -d "${BREW_PREFIX}/opt/libressl/bin" ]; then
    PATH="${BREW_PREFIX}/opt/libressl/bin:$PATH"
  fi

  if [ -d "${BREW_PREFIX}/opt/sqlite/bin" ]; then
    PATH="${BREW_PREFIX}/opt/sqlite/bin:$PATH"
  fi
  if [ -d "${BREW_PREFIX}/opt/libpcap/bin" ]; then
    PATH="${BREW_PREFIX}/opt/libpcap/bin:$PATH"
  fi
  if [ -d "${BREW_PREFIX}/opt/llvm/bin" ]; then
    PATH="${BREW_PREFIX}/opt/llvm/bin:$PATH"
  fi

  # The following are keg only formulas

  # Use GNU utils instead of the default ones on MacOS
  if [ -d "${BREW_PREFIX}/opt/findutils/libexec/gnubin" ]; then
    PATH="${BREW_PREFIX}/opt/findutils/libexec/gnubin:$PATH"
  fi
  if [ -d "${BREW_PREFIX}/opt/coreutils/libexec/gnubin" ]; then
    PATH="${BREW_PREFIX}/opt/coreutils/libexec/gnubin:$PATH"
  fi
  if [ -d "${BREW_PREFIX}/opt/make/libexec/gnubin" ];then
    PATH="${BREW_PREFIX}/opt/make/libexec/gnubin:$PATH"
  fi
  if [ -d "${BREW_PREFIX}/opt/gnu-tar/libexec/gnubin" ]; then
    PATH="${BREW_PREFIX}/opt/gnu-tar/libexec/gnubin:$PATH"
  fi
  if [ -d "${BREW_PREFIX}/opt/gnu-sed/libexec/gnubin" ]; then
    PATH="${BREW_PREFIX}/opt/gnu-sed/libexec/gnubin:$PATH"
  fi
  if [ -d "${BREW_PREFIX}/opt/gnu-getopt/bin" ]; then
    PATH="${BREW_PREFIX}/opt/gnu-getopt/bin:$PATH"
  fi
  if [ -d "${BREW_PREFIX}/opt/gnu-time/libexec/gnubin" ]; then
    PATH="${BREW_PREFIX}/opt/gnu-time/libexec/gnubin:$PATH"
  fi
  if [ -d "${BREW_PREFIX}/opt/whois/bin" ]; then
    PATH="${BREW_PREFIX}/opt/whois/bin:$PATH"
  fi
  if [ -d "${BREW_PREFIX}/opt/gpatch/bin" ]; then
    PATH="${BREW_PREFIX}/opt/gpatch/bin:$PATH"
  fi
  # TODO: can't compile python with homebrew binutils
  # if [ -d "${BREW_PREFIX}/opt/binutils/bin" ]; then
  #   PATH="${BREW_PREFIX}/opt/binutils/bin:$PATH"
  # fi

  # Setup Compiler paths

  export LDFLAGS="${LDFLAGS}  -L${BREW_PREFIX}/opt/zlib/lib"
  export CPPFLAGS="${CPPFLAGS}  -I${BREW_PREFIX}/opt/zlib/include"
  export PKG_CONFIG_PATH="${PKG_CONFIG_PATH}  ${BREW_PREFIX}/opt/zlib/pkgconfig"

  export LDFLAGS="${LDFLAGS}  -L${BREW_PREFIX}/opt/bzip2/lib"
  export CPPFLAGS="${CPPFLAGS}  -I${BREW_PREFIX}/opt/bzip2/include"
  export PKG_CONFIG_PATH="${PKG_CONFIG_PATH}  ${BREW_PREFIX}/opt/bzip2/pkgconfig"

  export LDFLAGS="${LDFLAGS}  -L${BREW_PREFIX}/opt/libressl/lib"
  export CPPFLAGS="${CPPFLAGS}  -I${BREW_PREFIX}/opt/libressl/include"
  export PKG_CONFIG_PATH="${PKG_CONFIG_PATH}  ${BREW_PREFIX}/opt/libressl/lib/pkgconfig"

  export LDFLAGS="${LDFLAGS}  -L${BREW_PREFIX}/opt/openssl/lib"
  export CPPFLAGS="${CPPFLAGS}  -I${BREW_PREFIX}/opt/openssl/include"
  export PKG_CONFIG_PATH="${PKG_CONFIG_PATH}  ${BREW_PREFIX}/opt/openssl/lib/pkgconfig"

  export LDFLAGS="${LDFLAGS}  -L${BREW_PREFIX}/opt/readline/lib"
  export CPPFLAGS="${CPPFLAGS}  -I${BREW_PREFIX}/opt/readline/include"
  export PKG_CONFIG_PATH="${PKG_CONFIG_PATH}  ${BREW_PREFIX}/opt/readline/lib/readline"

  # export LDFLAGS="${LDFLAGS}  -L${BREW_PREFIX}/opt/sqlite/lib"
  # export CPPFLAGS="${CPPFLAGS}  -I${BREW_PREFIX}/opt/sqlite/include"
  # export PKG_CONFIG_PATH="${PKG_CONFIG_PATH}  ${BREW_PREFIX}/opt/sqlite/lib/pkgconfig"

  # export LDFLAGS="${LDFLAGS} -L${BREW_PREFIX}/opt/tcl-tk/lib"
  # export CPPFLAGS="${CPPFLAGS} -I${BREW_PREFIX}/opt/tcl-tk/include"

  # export LDFLAGS="${LDFLAGS} -L${BREW_PREFIX}/opt/tcl-tk/lib"
  # export CPPFLAGS="${CPPFLAGS} -I${BREW_PREFIX}/opt/tcl-tk/include"
  # export PKG_CONFIG_PATH="${PKG_CONFIG_PATH} ${BREW_PREFIX}/opt/tcl-tk/lib/pkgconfig"
  # export CFLAGS="${CFLAGS} -I${BREW_PREFIX}/opt/tcl-tk/include"

  # export LDFLAGS="${LDFLAGS}  -L${BREW_PREFIX}/opt/binutils/lib"
  # export CPPFLAGS="${LDFLAGS}  -I${BREW_PREFIX}/opt/binutils/include"

  export CFLAGS="-Wno-error=implicit-function-declaration"

  # Use brew python
  if [ -d "${BREW_PREFIX}/opt/python/libexec/bin" ]; then
    PATH="${BREW_PREFIX}/opt/python/libexec/bin:$PATH"
  fi

  if [[ "$(uname -s)" == "Darwin" ]]; then
    # TODO: cant compile python with homebrew clang
    SDKROOT="$(xcrun --show-sdk-path)"
    # export LDFLAGS="${LDFLAGS}  -L${SDKROOT}/usr/lib"
    # export CPPFLAGS="${CPPFLAGS} -I${SDKROOT}/usr/include"

    CC="/Library/Developer/CommandLineTools/usr/bin/clang"
    CXX="/Library/Developer/CommandLineTools/usr/bin/clang++"
  fi

  export PYTHON_CONFIGURE_OPTS="--with-openssl=${BREW_PREFIX}/opt/libressl"

  # export PYTHON_CONFIGURE_OPTS="${PYTHON_CONFIGURE_OPTS} --with-tcltk-includes='-I${BREW_PREFIX}/opt/tcl-tk/include' --with-tcltk-libs='-L${BREW_PREFIX}/opt/tcl-tk/lib -ltcl8.6 -ltk8.6'"

  # if [ -x "$(command -v brew)" ]; then
  #   if [ -d "$(ls -1d $(brew --prefix)/lib/py*/* | tail -n1)" ]; then
  #     PYTHONPATH="$(ls -1d $(brew --prefix)/lib/py*/* | tail -n1)"
  #   fi
  # #   for P in $(ls -1d $(brew --prefix)/lib/py*/*); do
  # #     if [ -z "$PYTHONPATH" ]; then
  # #       PYTHONPATH="${P}"
  # #     else
  # #       PYTHONPATH="${P}:$PYTHONPATH"
  # #     fi
  # #   done
  # fi

  # Use brew ruby
  if [ -d "${BREW_PREFIX}/opt/ruby/bin" ]; then
    PATH="${BREW_PREFIX}/opt/ruby/bin:$PATH"
    # LDFLAGS="-L${BREW_PREFIX}/opt/ruby/lib"
    # CPPFLAGS="-I${BREW_PREFIX}/opt/ruby/include"
    # PKG_CONFIG_PATH="${BREW_PREFIX}/opt/ruby/lib/pkgconfig"
  fi

  if [ -x "$(command -v ruby)" ] && [ -x "$(command -v gem)" ]; then
    PATH="$(ruby -r rubygems -e 'puts Gem.bindir'):$PATH"
    PATH="$(ruby -r rubygems -e 'puts Gem.user_dir')/bin:$PATH"
  fi

  # Use the OpenSSL from Homebrew instead of ruby-build
  # Note: the Homebrew version gets updated, the ruby-build version doesn't
  export RUBY_CONFIGURE_OPTS="--with-openssl-dir=${BREW_PREFIX}/opt/libressl"
  # for older ruby versions you can try
  # export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@1.1)"

  # Linuxbrew paths
  if [ -d "$HOME/.linuxbrew/bin" ]; then
    PATH="$HOME/.linuxbrew/bin:$PATH"
  fi
  if [ -d "$HOME/.linuxbrew/share/man" ]; then
    MANPATH="$HOME/.linuxbrew/share/man:$MANPATH"
  fi
  if [ -d "$HOME/.linuxbrew/share/info" ]; then
    INFOPATH="$HOME/.linuxbrew/share/info:$INFOPATH"
  fi

  # K8s stuff
  if [ -d "${BREW_PREFIX}/kubebuilder/bin" ]; then
    PATH="$PATH:${BREW_PREFIX}/kubebuilder/bin"
  fi
fi

PATH="${KREW_ROOT:-${HOME}/.krew}/bin:$PATH"

# Load pyenv
# if [ -x "$(command -v pyenv)" ]; then
#   eval "$(pyenv init --path)"
#   eval "$(pyenv init -)"
#   [ -x "$(command -v pyenv-virtualenv-init)" ] && eval "$(pyenv virtualenv-init -)"
# fi

# Load rbenv
# if [ -x "$(command -v rbenv)" ]; then
#   eval "$(rbenv init -)"
#   # Extract the latest version of Ruby so you can do this:
#   rbenv install $LATEST_RUBY_VERSION
#   export LATEST_RUBY_VERSION=$(rbenv install -L | grep -v - | tail -1)
# fi

[ -x ${HOME}/.chefvm/bin/chefvm ] && eval "$(${HOME}/.chefvm/bin/chefvm init -)"

# GOPATH
GOPATH="${HOME}/go:${HOME}/workingCopies"
GOBIN="${GOPATH/:*}/bin"
PATH="${PATH}:${GOBIN}"

# Cargo bins
# [ -f ${HOME}/.cargo/env ] && source ${HOME}/.cargo/env
if [ -d "${HOME}/.cargo/bin" ]; then
  PATH="${HOME}/.cargo/bin:$PATH"
fi

if [ -d "${HOME}/.kitty-tmux" ]; then
  PATH="${HOME}/.kitty-tmux:$PATH"
fi

# set PATH so it includes user's private bin if it exists
if [ -d "${HOME}/.local/bin" ]; then
  PATH="${HOME}/.local/bin:${PATH}"
fi
if [ -d "${HOME}/bin" ] ; then
  PATH="${HOME}/bin:$PATH"
fi

if [ -d "${HOME}/.theme.sh" ]; then
  PATH="${HOME}/.theme.sh/bin:${PATH}"
fi

if command -v theme.sh > /dev/null; then
  [ -e ~/.theme_history ] && theme.sh "$(theme.sh -l|tail -n1)"

  alias th='theme.sh -i'

  # Interactively load a light theme
  alias thl='theme.sh --light -i'

  # Interactively load a dark theme
  alias thd='theme.sh --dark -i'
fi

# Avoid duplicates
PATH="$(perl -e 'print join(":", grep { not $seen{$_}++ } split(/:/, $ENV{PATH}))')"

# make less more friendly for non-text input files, see lesspipe(1)
[ -x "$(command -v lesspipe)" ] && eval "$(SHELL=/bin/sh lesspipe)"
[ -x "$(command -v lesspipe.sh)" ] && eval "$(SHELL=/bin/sh lesspipe.sh)"

# if running bash
if [ -n "$BASH_VERSION" ]; then
  # include .bashrc if it exists
  if [ -f "$HOME/.bashrc" ] && [[ "$CONFIGURED" != "true" ]]; then
    . "$HOME/.bashrc"
  fi
fi
