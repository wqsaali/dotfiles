#!/usr/bin/env bash
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

if [[ $CONFIGURED == "true" ]]; then
  return
fi

# If not running interactively, don't do anything
case $- in
*i*)
  [ -x "$(command -v tmux)" ] && [[ ! $TERM =~ screen ]] && [ -z "$TMUX" ] && [ -z "$VIMRUNTIME" ] && exec tmux
  ;;
*) return ;;
esac

export TERM='xterm-256color'

if [[ $(tty) == "/dev/tty"* ]] && [[ $OSTYPE == "linux-gnu" ]]; then
  setfont ter-powerline-v16b.psf.gz
fi

if [[ $OSTYPE == "linux-gnu" ]]; then
  export TERMINAL=/usr/bin/gnome-terminal
fi

# Check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
# shopt -s globstar

# Use extra globing features. See man bash, search extglob.
# shopt -s extglob

# Include .files when globbing.
# shopt -s dotglob

# When a glob expands to nothing,
# make it an empty string instead of the literal characters.
# shopt -s nullglob

# Fix spelling errors for cd, only in interactive shell
# shopt -s cdspell

# append to the history file, don't overwrite it
shopt -s histappend

# vi mode
# set -o vi

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
export HISTCONTROL=ignoreboth:erasedups:ignorespace
export HISTIGNORE="&:ls:bg:fg:cd"

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
export HISTSIZE=10000
export HISTFILESIZE=200000
export HISTTIMEFORMAT="%d-%m-%Y %H:%M:%S "

__bash_history_sync() {
  builtin history -a
  builtin history -c
  builtin history -r
}

history() {
  __bash_history_sync
  builtin history "$@"
}

_eternal_history_histfile=~/.bash_eternal_history

export PROMPT_COMMAND='echo "$(history 1)" >> $_eternal_history_histfile'"; __bash_history_sync ${PROMPT_COMMAND}"

# CTRL+R Alternatives

# Fuzzy Find
if [ -x "$(command -v fzf)" ]; then

  __ehc() {
    if
      [[ -n $1 ]]
    then
      bind '"\er": redraw-current-line'
      bind '"\e^": magic-space'
      READLINE_LINE=${READLINE_LINE:+${READLINE_LINE:0:READLINE_POINT}}${1}${READLINE_LINE:+${READLINE_LINE:READLINE_POINT}}
      READLINE_POINT=$((READLINE_POINT + ${#1}))
    else
      bind '"\er":'
      bind '"\e^":'
    fi
  }

  __fzf_history() {
    __ehc $(history | fzf --tac --tiebreak=index --height=10 | perl -ne 'm/^\s*([0-9]+)/ and print "!$1"')
  }

  bind '"\C-r": "\C-x1\e^\er"'
  bind -x '"\C-x1": __fzf_history'

# HH
elif [ -x "$(command -v hh)" ]; then

  # hh configuration:
  # https://github.com/dvorka/hstr
  # Generated with: hh --show-configuration >> ~/.bashrc
  export HH_CONFIG=hicolor # get more colors
  # export PROMPT_COMMAND="history -a; history -n; ${PROMPT_COMMAND}"   # mem/file sync
  # if this is interactive shell, then bind hh to Ctrl-r (for Vi mode check doc)
  if [[ $- =~ .*i.* ]]; then bind '"\C-r": "\C-a hh -- \C-j"'; fi

fi

# fh - repeat history
function fh() {
  eval $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
}

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
  debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
xterm-color | *-256color) color_prompt=yes ;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
  if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
  else
    color_prompt=
  fi
fi

if [ "$color_prompt" = yes ]; then
  PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
  PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm* | rxvt*)
  PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
  ;;
*) ;;

esac

# Key bindings, up/down arrow searches through history
bind '"\e[A"':history-search-backward
bind '"\e[B"':history-search-forward
bind '"\C-\e[B"':"\"\C-k\C-ahistory | grep '^ *[0-9]* *\C-e.'\C-m\""
bind Space:magic-space

if [ -x "$(command -v brew)" ]; then
  # Ubuntuâ€™s command-not-found equivalent for Homebrew on OSX
  eval "$(brew command-not-found-init)"

  # export RBENV_ROOT="$(brew --prefix rbenv)"
  # export GEM_HOME="$(brew --prefix)/opt/gems"
  # export GEM_PATH="$(brew --prefix)/opt/gems"
  export HOMEBREW_PREFIX="$(brew --prefix)"
fi

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

[ -f "$HOME"/.aliases ] && source "${HOME}/.aliases"

# Auto completion
# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  export BASH_COMPLETION_COMPAT_DIR="/usr/local/etc/bash_completion.d"
  [ -f /etc/bash_completion ] && . /etc/bash_completion
  [ -f /usr/share/bash-completion/bash_completion ] && . /usr/share/bash-completion/bash_completion
  [ -f /usr/local/etc/bash_completion ] && . /usr/local/etc/bash_completion
  [ -f /usr/local/share/bash-completion/bash_completion ] && . /usr/local/share/bash-completion/bash_completion
  [ -f /usr/local/etc/profile.d/bash_completion.sh ] && . /usr/local/etc/profile.d/bash_completion.sh
fi

# [ -x "$(command -v aws_completer)" ] && complete -C 'aws_completer' aws
# [ -x "$(command -v awless)" ] && source <(awless completion bash)
# [ -x "$(command -v kubectl)" ] && source <(kubectl completion bash)
# [ -x "$(command -v helm)" ] && source <(helm completion bash)
# [ -x "$(command -v kops)" ] && source <(kops completion bash)
# [ -x "$(command -v azure)" ] && source <(azure --completion)
# [ -x "$(command -v kontena)" ] && source "$(kontena whoami --bash-completion-path)"
# if [ -f /usr/local/opt/chpharos/share/chpharos/chpharos.sh ]; then
#   source /usr/local/opt/chpharos/share/chpharos/chpharos.sh
# fi

[ -x "$(command -v thefuck)" ] && eval "$(thefuck --alias)"

if [ -n "${HOMEBREW_PREFIX}" ]; then
  [ ! -f ${HOMEBREW_PREFIX}/opt/asdf/asdf.sh ] || source "${HOMEBREW_PREFIX}/opt/asdf/asdf.sh"
  [ ! -f ${HOMEBREW_PREFIX}/opt/asdf/etc/bash_completion.d/asdf.bash ] || source "${HOMEBREW_PREFIX}/opt/asdf/etc/bash_completion.d/asdf.bash"
fi

[ "$OSTYPE" == "linux-gnu" ] && source /etc/profile.d/vte-2.91.sh

[ -f /etc/grc.bashrc ] && source /etc/grc.bashrc
[ -f /usr/local/etc/grc.bashrc ] && source /usr/local/etc/grc.bashrc

# gitprompt configuration

# export KUBE_PS1_CLUSTER_FUNCTION=get_k8s_name
export KUBE_PS1_NAMESPACE_FUNCTION=get_k8s_ns
# bash-git-prompt configuration - https://github.com/magicmonty/bash-git-prompt:
GIT_PROMPT_THEME=Custom # use custom .git-prompt-colors.sh
[ ! -f "${HOME}/.bash/bash-git-prompt/gitprompt.sh" ] || source "${HOME}/.bash/bash-git-prompt/gitprompt.sh"
[ ! -f "${HOME}/.bash/kube-ps1/kube-ps1.sh" ] || source "${HOME}/.bash/kube-ps1/kube-ps1.sh"

# source ~/.bash/git_prompt.sh

# Promptline - https://github.com/edkolev/promptline.vim
# source ~/.bash/shell_prompt.sh

# Powerline-shell - https://github.com/milkbikis/powerline-shell
# function _update_ps1() {
#     PS1="$(~/.bash/powerline-shell/powerline-shell.py $? 2> /dev/null)"
# }
#
# if [ "$TERM" != "linux" ]; then
#     PROMPT_COMMAND="_update_ps1; $PROMPT_COMMAND"
# fi

export PS1

# eval "$(starship init bash)"

CONFIGURED="true"
