#!/usr/bin/env bash

# git sub-command to clone a repo into a go workspace
# Note that this scrip depends on the gnu version of getopt
# in macOS you can get it with brew install gnu-getopt
# and setting your path to PATH="/usr/local/opt/gnu-getopt/bin:$PATH"

# Possible url formats:
# url="git://github.com/some-user/my-repo.git"
# url="https://github.com/some-user/my-repo.git"
# url="git@github.com:some-user/my-repo.git"

function usage {
  if [ -n "${1}" ]; then
    echo -e "${1}"
    echo ''
  fi
  echo "Usage: $(basename "$0") <url> [<flags>]"
  echo ''
  echo 'Flags:'
  echo '  -h, --help                      display help'
  echo '  -d, --debug                     enable debug output'
  echo '  -u, --update                    update if it already exists'
  echo '  -w, --workspace <workspace>     either a number or a valid go workspace path'
  echo ''
  echo 'If you pass a number for workspace a path will be fetched from $GOPATH'
  echo 'where the number is the position of the workspace in the GOPATH environment varialbe'
  echo 'by default the last workspace defined in the GOPATH environment varialbe will be used'
  echo ''
  exit 1
}

OPTS=$(getopt -o hduw: --long help,debug,workspace: -n "$(basename "$0")" -- "$@")

[ $? != 0 ] && usage "Terminating..." >&2

eval set -- "$OPTS"

w=-1
cdir=$(pwd)
workspace="${GOPATH##*:}"
DEBUG=false
UPDATE=false

while true; do
  case "$1" in
  -h | --help) usage ;;
  -d | --debug)
    DEBUG=true
    shift
    ;;
  -u | --update)
    UPDATE=true
    shift
    ;;
  -w | --workspace)
    w="$2"
    shift 2
    ;;
  --)
    shift
    break
    ;;
  *) break ;;
  esac
done

url=${1}

if [[ $url == "help" ]]; then usage; fi

if [ -z "$url" ]; then
  usage "You need to provide a repo URL.\nTerminating...\n" >&2
fi

# Break down the url into components
re='^(https|(ssh:\/\/)?git)(:\/\/|@)([^\/:]+)[\/:]([^\/:]+)\/(.+)(.git)?$'
if [[ $url =~ $re ]]; then
  protocol=${BASH_REMATCH[1]}
  separator=${BASH_REMATCH[3]}
  hostname=${BASH_REMATCH[4]}
  user=${BASH_REMATCH[5]}
  repo=${BASH_REMATCH[6]}
else
  echo -e "Invalid repo URL.\nTerminating..." >&2
  exit 1
fi

path=${workspace}/src/$(echo "${hostname}/${user}/${repo}" | sed -e 's/\.git$//g')

# Check if the workspace passed by the user is a number
# and get the corresponding workspace from GOPATH
re='^[+-]?[0-9]+([.][0-9]+)?$'
if [[ $w =~ $re ]]; then
  saveIFS=$IFS
  IFS=":"
  workspace=($GOPATH)
  IFS=$saveIFS
  workspace=${workspace[${w}]}
else
  workspace=$w
fi

if [[ ${DEBUG} == "true" ]]; then
  echo "Cloning ${url} into: ${path}"
fi

if [ -d "${path}" ] && [[ ${UPDATE} == "true" ]]; then
  cd "${path}" || exit
  git pull
  cd "${cdir}" || exit
else
  mkdir -p "${path}"
  git clone --recurse-submodules "${url}" "${path}"
fi
