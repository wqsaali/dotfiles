#!/usr/bin/env bash

# Script to trim kubectl objects by removing some properties
# By default it will skip all k8s managed properties
# This scritp can be used as a kubectl plugin and invoked as a sub-command
# Examples:
#   kubectl trim pod/metac-0
#   kubectl trim pod metac-0 -t .metadata,.status,.apiVersion,.kind

FIELDS=(.status '.metadata.annotations."kubectl.kubernetes.io/last-applied-configuration"' .metadata.creationTimestamp .metadata.finalizers .metadata.generation .metadata.uid .metadata.resourceVersion .metadata.selfLink .metadata.ownerReferences .metadata.managedFields)
OUTPUT="yaml"
CONVERT=""

function usage() {
  if [ -n "${1}" ]; then
    echo -e "${1}"
    echo ''
  fi
  echo "Usage: $(basename "$0") [<flags>] <resource>"
  echo ''
  echo 'Flags:'
  echo '  -h, --help                            display help'
  echo '  -d, --debug                           enable debug output'
  echo '  -o, --output                          select output format, json or yaml, default: yaml'
  echo '  -t, --trim                            comma separated list of fields to trim'
  exit 1
}

function join_by() {
  # local IFS="$1"; shift; echo -n "$*";
  local d=$1
  shift
  echo -n "$1"
  shift
  printf "%s" "${@/#/$d}"
}

function split_by() {
  # IFS="${1}" read -r -a array <<< "${2}"
  echo "${2}" | tr "$1" "\n"
}

if ! [ -x "$(command -v jq)" ]; then
  echo -e "You need jq.\nTerminating...\n" >&2
  exit 1
fi

if ! [ -x "$(command -v yq)" ]; then
  echo -e "You need yq.\nTerminating...\n" >&2
  exit 1
fi

POSITIONAL=()
while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
  -h | --help) usage ;;
  -d | --debug)
    DEBUG=true
    shift
    ;;
  -o | --output)
    OUTPUT="$2"
    shift 2
    ;;
  -t | --trim)
    FIELDS=($(split_by ',' "$2"))
    shift 2
    ;;
  *)
    POSITIONAL+=("$1") # save it in an array for later
    shift              # past argument
    ;;
  esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

case $OUTPUT in
json)
  CONVERT=""
  ;;
yaml)
  CONVERT="| yq e -P -"
  ;;
*)
  usage "Invalid output format: ${OUTPUT} \n" >&2
  ;;
esac

TRIM='walk(if type == "object" then del('$(join_by '?, ' "${FIELDS[@]}")') else . end)'
CMD="kubectl get -o json ${@} | jq '${TRIM}' ${CONVERT}"

if [[ ${DEBUG} == "true" ]]; then
  echo "${CMD}"
fi

eval "${CMD}"
