#!/usr/bin/env bash

# Script to install binaries and scripts from Github
# It supports getting files for releases
# or directly from the repo source tree
# Examples:
#    hubinstall -r johanhaleby/kubetail
#    hubinstall kubernetes-sigs/kubebuilder
#    hubinstall kubernetes-sigs/kubebuilder

# Defaults
install_to="${HOME}/.local/bin/"
artifact_folder=artefacts
tag="master"
RAW=false
DEBUG=false

function usage {
  if [ -n "${1}" ]; then
    echo -e "${1}"
    echo ''
  fi
  echo "Usage: $(basename "$0") <project> [<os>] [<arch>] [<binary>] [<flags>]"
  echo ''
  echo 'Flags:'
  echo '  -h, --help                            display help'
  echo '  -d, --debug                           enable debug output'
  echo '  -r, --raw                             install raw script instead of from releases'
  echo "  -i, --install-to <installation path>  where to install; default: ${install_to}"
  echo "  -t, --tag <tag>                       version to fetch; default: ${tag}"
  echo ''
  echo 'Set --tag to latest to automatically discover the latest tag'
  echo ''
  exit 1
}

function install() {
  if [ -f "${1}" ]; then
    chmod +x "${1}"
    mv "${1}" "${install_to}"
  else
    echo "Error: ${1} not found"
  fi
}

extract() {
  if [ -f "$1" ]; then
    case $1 in
    *.tar.bz2) tar xvjf "$1" ;;
    *.tar.gz) tar xvzf "$1" ;;
    *.bz2) bunzip2 "$1" ;;
    *.rar) rar x "$1" ;;
    *.gz) gunzip "$1" ;;
    *.tar) tar xvf "$1" ;;
    *.tbz2) tar xvjf "$1" ;;
    *.tgz) tar xvzf "$1" ;;
    *.zip) unzip "$1" ;;
    *.Z) uncompress "$1" ;;
    *.7z) 7z x "$1" ;;
    *) echo "don't know '$1'..." ;;
    esac
  else
    echo "'$1' is not a valid file!"
  fi
}

function installFromGithub() {
  project="${1}"
  os=${2:-$(uname -s | tr '[:upper:]' '[:lower:]')}
  arch="${3:-64}"
  name="${4:-$(basename "${project}")}"

  if [[ ${os} == "darwin" ]]; then
    os='(darwin|osx|macos)'
  fi

  mkdir -p "${install_to}"

  url=$(curl -sL "https://api.github.com/repos/${project}/releases/latest" | jq -r ".assets[]? | select(.name | test(\"${os}.*${arch}\";\"i\") and (test(\"sha[0-9]+\";\"i\")|not)) | .browser_download_url?" | grep -Ev '(md5|sha[0-9]+)$')
  if [[ $(echo -e "${url}" | wc -l) -gt 1 ]]; then
    [[ ${DEBUG} == "true" ]] && echo -e "Got multiple URLs: \n${url}"
    url=$(echo -e "${url}" | grep -E "${project}.*${name}" | head -n 1)
  fi
  [[ ${DEBUG} == "true" ]] && echo -e "URL: \n${url}"

  if [ -z "${url}" ]; then
    echo 'Error: no releases found, note that pre-releases are not supported!'
    return 1
  fi
  artifact=$(basename "${url}")
  [[ ${DEBUG} == "true" ]] && echo -e "Artifact: \n${artifact}"

  re='^(.*)\.(tar\.gz|tgz|zip)$'
  if [[ ${artifact} =~ ${re} ]]; then
    artifact_name=${BASH_REMATCH[1]}
    artifact_ext=${BASH_REMATCH[2]}
    if [[ ${DEBUG} == "true" ]]; then
      echo "Artifact ${artifact_name} is a tarball (${artifact_ext})"
    fi
    curl -sLo "${artifact}" "${url}"
    if [[ $artifact_ext == "zip" ]]; then
      unzip "${artifact}" -d "${artifact_folder}"
    else
      tar -xzf "${artifact}" --one-top-level="${artifact_folder}" --unlink-first # gnu-tar is needed for this one
    fi
    [[ ${DEBUG} == "true" ]] && echo -e "$(tree ${artifact_folder})"
    files=$(find ./${artifact_folder}/ -type f -name "${name}*")
    [[ ${DEBUG} == "true" ]] && echo -e "files found: \n${files}"
    if [[ $(echo "${files}" | wc -l) -gt 1 ]]; then
      for f in ${files}; do
        install "${f}"
      done
    else
      mv "${files}" "${name}"
      install "${name}"
    fi
    rm "${artifact}"
    rm -rf "${artifact_name}"
    rm -rf ${artifact_folder}
  else
    curl -sLo "${name}" "${url}"
    install "${name}"
  fi
}

function getFromRawGithub() {
  project="${1}"
  name="${2:-$(basename "${project}")}"
  tag="${3:-master}"
  if [[ ${tag} == "latest" ]]; then
    tag=$(curl -sL https://api.github.com/repos/"${project}"/releases/latest | jq -r '.tag_name' | tr -d 'v')
  fi

  url="https://raw.githubusercontent.com/${project}/${tag}/${name// /%20}"

  curl -sLo "$(basename "${name}")" "${url}"
}

function installFromRawGithub() {
  project="${1}"
  name="${2:-$(basename "${project}")}"
  tag="${3:-master}"
  getFromRawGithub "${project}" "${name}" "${tag}"
  install "${name}"
}

function pipeBashFromRawGithub() {
  project="${1}"
  name="${2:-$(basename "${project}")}"
  tag="${3:-master}"
  getFromRawGithub "${project}" "${name}" "${tag}"
  bash "${name}"
  rm "${name}"
}

OPTS=$(getopt -o hdrt:i: --long help,debug,raw,tag:,install-to: -n "$(basename "$0")" -- "$@")

if [ $? != 0 ]; then usage "Terminating...\n" >&2; fi

eval set -- "$OPTS"

while true; do
  case "$1" in
  -h | --help) usage ;;
  -d | --debug)
    DEBUG=true
    shift
    ;;
  -r | --raw)
    RAW=true
    shift
    ;;
  -i | --install-to)
    install_to="$2"
    shift 2
    ;;
  -t | --tag)
    tag="$2"
    shift 2
    ;;
  --)
    shift
    break
    ;;
  *) break ;;
  esac
done

mkdir -p "${install_to}"

# Allow the file to be sourced without excuting this part
if [ "$0" = "$BASH_SOURCE" ]; then
  project="${1}"
  if [ -z "${project}" ]; then
    usage "You need to provide a project.\nTerminating...\n" >&2
  fi

  if [[ ${RAW} == "true" ]]; then
    name="${2:-$(basename "${project}")}"
    installFromRawGithub "${project}" "${name}" "${tag}"
  else
    os=${2:-$(uname -s | tr '[:upper:]' '[:lower:]')}
    arch="${3:-64}"
    name="${4:-$(basename "${project}")}"
    installFromGithub "${project}" "${os}" "${arch}" "${name}"
  fi
fi
